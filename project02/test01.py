# 固定语法，导入 pygame 库
from pygame import *

# initialize (v. 初始化，准备) 单词的缩写，用途是初始化 pygame 库
# 固定语法写在前面即可
init() 

# 创建一个窗口，用的是 display.set_mode，里面需要给的东西就是窗口以像素为单位的大小（不含标题栏）
# 为了后续操控这个窗口，我们要把它拿掉并且保存在变量里
# window = display.set_mode(640, 480) 这么写不行（pygame 规定的）
window = display.set_mode((640, 480)) # 只能这样写，至于为什么我会讲一下

# 我们想要在窗口上绘制一张图片
# 那得先把它加载进我们的程序
# 加载图片用 image.load, 要给的东西是图片文件所在的路径（放到与 python 文件同一位置时就写文件名即可）
img = image.load('test.png')
# 现在 img 里保存着我们的图片数据

# 游戏是一个循环，得卡这，我说退出才能退出，因此我们用死循环即可
while True:

    # 这里比较难，可以理解为 event.get() 会返回一个列表，这里面记录了有用户所有的操作
    # 包括键盘鼠标，关闭，拖动窗口之类的
    # 用 for 循环遍历这个列表，可以得到用户在一帧之内所有的操作（运行速度很快）
    # e 是一个随着循环不断改变的变量，每一次都是列表里新的一个值
    for e in event.get():
        # 我们现在只需要让窗口可以被我们关闭
        # 当我们点击窗口的 x 时，会有一个 QUIT 操作
        # 判断操作的的类型是不是 QUIT 即可
        # 操作类型可以用 e.type 这样的语法拿到
        #                   e   . type
        # . 理解为 `的`，即 `操作 的 类型`
        if e.type == QUIT:
            # 直接退出程序，窗口自然就关闭了
            exit()

    # 加载了图片我们自然要绘制上来
    # 绘制用的是 window.blit，即在我们的 window 上画东西
    # 他需要两个参数，一个是要画什么，一个是在哪画
    # 画的东西就是 img, 在哪画需要一个用括号括起来的坐标，指明了图片左上角的位置在窗口坐标系的哪里
    # (0, 0) 就是原点，即左上角
    window.blit(img, (0, 0))
    
    # 固定语法，刷新整个窗口
    display.flip()
