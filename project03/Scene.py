# Generated by manim_helper at 24-09-30_22-29-30

import random
from typing import Any

import tqdm
from manim import *

import manim_helper

class Scene(Scene):

    EMULATING_COUNT = 10000

    def prepare(self) -> None:
        loader = manim_helper.TextLoader("script.json")
        text_data = loader.load()
        self.objects = loader.apply(text_data)
        self.director = manim_helper.Director(self.objects, "actions.json")

    def construct(self) -> None:
        self.prepare()

        self.director.set_target_show(self)
        self.director.load_actions()
        self.director.start_play()   

        # Here's the emulation logic (manually added)
        rect: Mobject = self.objects.get_object('surrounding_rect')
        lm = rect.get_left()
        lt = np.array([lm[0], lm[1] + 1.32, lm[2]])
        rb = np.array([lt[0] + PI * 1.32, lt[1] - 1 * 1.32 * 2, lt[2]])
        origin = np.array([lt[0], lt[1] - 1 * 1.32 * 2, lt[2]])
        self.add(Point(origin, color=YELLOW))
        print(lt, rb, origin)
        # [-3.60294526  1.31999968  0.        ] [ 0.54395704 -1.32000032  0.        ] [-3.60294526 -1.32000032  0.        ]

        insides = 0
        for i in tqdm.tqdm(range(Scene.EMULATING_COUNT + 1)):
            pos = np.array([random.uniform(lt[0], rb[0]), random.uniform(lt[1], rb[1]), lm[2]])
            fixed_pos = np.array([(pos[0] + 3.60294526) / 1.32, (pos[1] + 1.32000032) / 1.32, pos[2]])
            print(fixed_pos)
            color: Any
            if fixed_pos[1] / 2 > np.sin(fixed_pos[0]):
                color = BLUE
            else:
                color = RED
                insides += 1
            p = Point(pos, color=color)
            self.objects.get_object("denominator").set_value(i)
            self.objects.get_object("numerator").set_value(insides)
            if i != 0:
                self.objects.get_object("result").set_value(insides / i * PI)
            self.wait(2 * 10 ** -2)
            self.add(p)

        self.wait(3)
